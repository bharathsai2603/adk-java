package com.example.mcpfilesystem;

import com.google.adk.agents.RunConfig;
import com.google.adk.artifacts.InMemoryArtifactService;
import com.google.adk.events.Event;
import com.google.adk.memory.InMemoryMemoryService;
import com.google.adk.runner.Runner;
import com.google.adk.sessions.InMemorySessionService;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.genai.types.Content;
import com.google.genai.types.Part;
import io.reactivex.rxjava3.core.Flowable;
import java.util.List;
import java.util.Objects;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/** Console runner that exercises {@link McpFilesystemAgent#ROOT_AGENT}. */
public final class McpFilesystemRun {
  private final String userId;
  private final String sessionId;
  private final Runner runner;

  private McpFilesystemRun() {
    String appName = "mcp-filesystem-app";
    this.userId = "mcp-filesystem-user";
    this.sessionId = UUID.randomUUID().toString();

    InMemorySessionService sessionService = new InMemorySessionService();
    this.runner =
        new Runner(
            McpFilesystemAgent.ROOT_AGENT,
            appName,
            new InMemoryArtifactService(),
            sessionService,
            new InMemoryMemoryService());

    ConcurrentMap<String, Object> initialState = new ConcurrentHashMap<>();
    var unused =
        sessionService.createSession(appName, userId, initialState, sessionId).blockingGet();
  }

  private void run(String prompt) {
    System.out.println("You> " + prompt);
    Content userMessage =
        Content.builder()
            .role("user")
            .parts(ImmutableList.of(Part.builder().text(prompt).build()))
            .build();
    RunConfig runConfig = RunConfig.builder().build();
    Flowable<Event> eventStream =
        this.runner.runAsync(this.userId, this.sessionId, userMessage, runConfig);
    List<Event> agentEvents = Lists.newArrayList(eventStream.blockingIterable());

    StringBuilder sb = new StringBuilder();
    sb.append("Agent> ");
    for (Event event : agentEvents) {
      sb.append(event.stringifyContent().stripTrailing());
    }
    System.out.println(sb);
  }

  /**
   * Entry point for the sample runner.
   *
   * @param args Optional command-line arguments. Pass {@code --run-extended} for additional
   *     prompts.
   */
  public static void main(String[] args) {
    McpFilesystemRun runner = new McpFilesystemRun();
    try {
      runner.run("List the files available in /tmp/mcp-demo");
      if (args.length > 0 && Objects.equals(args[0], "--run-extended")) {
        runner.run(
            "Create or overwrite /tmp/mcp-demo/notes.txt with the text 'MCP demo note generated by"
                + " the sample.'");
        runner.run("Read /tmp/mcp-demo/notes.txt to confirm the contents.");
        runner.run("Search /tmp/mcp-demo for the phrase 'MCP demo note'.");
        runner.run(
            "Append the line 'Appended by the extended run.' to /tmp/mcp-demo/notes.txt and show"
                + " the updated file.");
      }
    } finally {
      McpFilesystemAgent.ROOT_AGENT
          .toolsets()
          .forEach(
              toolset -> {
                try {
                  toolset.close();
                } catch (Exception e) {
                  System.err.println("Failed to close toolset: " + e.getMessage());
                }
              });
    }
  }
}
